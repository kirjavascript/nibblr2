{
    "locked": false,
    "starred": false,
    "name": "module.leaderboard",
    "command": "function render({\n    currency = '',\n    scores = [/*{ key, value, extra }*/],\n    combine = true,\n    limit = 5,\n    reverse = false,\n    title = 'Leaderboard',\n    groupPosition = false,\n    fmtNum = (value) => Intl.NumberFormat().format(+value),\n}) {\n    const output = [];\n    if (title) {\n        output.push(`{u}${title}{/}`);\n    }\n    // assert text in extra\n    scores.forEach(obj => { obj.extra = obj.extra || ''; })\n\n    const sortScores = (combine ? combineScores(scores) : scores)\n        .sort((a, b) => a.value - b.value);\n\n    const filterScores = (reverse ? sortScores.reverse() : sortScores)\n        .slice(0, limit || undefined);\n\n    const longestName = Math.max(15, getLongestName(filterScores));\n    const longestValue = filterScores.reduce((acc, cur) => Math.max(acc, fmtNum(cur.value).length), 0) + currency.length;\n\n    const colours = ['{y}','{gr}','{o}'];\n\n    // key can be string / array\n\n    let i = 0;\n    filterScores.forEach(({ key, value, extra }, index)=> {\n        const nameRaw = Array.isArray(key) ? key.join(', ') : key;\n        const name = nameRaw.replace(/\\w+/g, IRC.breakHighlight);\n        const score = fmtNum(value);\n        const number = i+1;\n        const colour = colours[index] || '';\n        const padding = '.'.repeat(Math.max(\n            2 + longestName + longestValue - nameRaw.length - score.length - (String(number).length - 1),\n            0,\n        ));\n        \n        output.push(`${number}. ${colour}${name}{/}{bo}${padding}{/}{y}${currency}${score}{/} ${extra}`);\n\n        // inc\n        if (!groupPosition || !Array.isArray(key)) {\n            i += 1;\n        } else {\n            i += key.length;\n        }\n    });\n\n    return output.join('\\n');\n}\n\nfunction combineScores(scores) {\n    return scores.reduce((acc, cur) => {\n        const exists = acc.findIndex((d) => d.value === cur.value);\n        if (exists !== -1) {\n            acc[exists].key.push(cur.key);\n            acc[exists].extra += ' ' + cur.extra;\n        } else {\n            cur.key = [cur.key];\n            acc.push(cur);\n        }\n        return acc;\n    }, []);\n}\n\nfunction getLongestName(scores) {\n    return scores.reduce((acc, cur) => (\n        Math.max(acc, Array.isArray(cur.key) ? cur.key.join(', ').length : cur.key.length)\n    ), 0);\n}\n\nmodule.exports = { render, combineScores };\n"
}