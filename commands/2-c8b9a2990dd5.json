{
    "locked": true,
    "starred": false,
    "name": "2",
    "command": "initSolver2x2();\nprint(`2x2x2 scramble #${IRC.require('module.count').next()}: ${genScramble2x2()}`)\n\n/*\nFile: solver2x2.js\nAuthors: Jaap Scherphuis (www.jaapsch.net) and Conrad Rider (www.crider.co.uk)\nDate: 10/21/09\nCopyright 2009: All rights reserved.\nDescription: Random-state scrambler and solver for the 2x2 cube\n\n*/\n\nfunction initSolver2x2(){\n\t// Generate lookup tables\n\tcalcperm();\n\tposit = new Array(\n\t\t2,2,2,2,\n\t\t1,1,1,1,\n\t\t0,0,0,0,\n\t\t3,3,3,3,\n\t\t4,4,4,4,\n\t\t5,5,5,5); \n\tpiece = new Array(\n\t\t15,16,16,21,21,15,\n\t\t13,9,9,17,17,13,\n\t\t14,20,20,4,4,14,\n\t\t12,5,5,8,8,12,\n\t\t3,23,23,18,18,3,\n\t\t1,19,19,11,11,1,\n\t\t2,6,6,22,22,2,\n\t\t0,10,10,7,7,0);\n}\n\nfunction genScramble2x2(lim){\n\n\tsol=new Array();\n\tdo{\n\t\t// Generate random permutation\n\t\tvar q = Math.floor(Math.random() * 5040);\n\t\n\t\t// Generate random orientation\n\t\tvar t = Math.floor(Math.random() * 729);\n\t\n\t\t// Solve the scramble\n\t\tsol=new Array();\n\t\tif(q!=0 || t!=0){\n\t\t\tsol.length=0;\n\t\t\tfor(var l=0;l<12;l++){  //max length of solution is 11\n\t\t\t\tif(search(0,q,t,l,-1)) break;\n\t\t\t}\n\t\t}\n\t}while(sol.length < lim)\n\tt=\"\";\n\tfor(q=0;q<sol.length;q++){\n\t\tt+=\" \"+\"URF\".charAt(sol[q]/10)+\" 2\\'\".charAt(sol[q]%10);\n\t}\n\treturn t;\n}\n\nfunction search(d,q,t,l,lm){\n\t//searches for solution, from position q|t, in l moves exactly. last move was lm, current depth=d\n\tif(l==0){\n\t\tif(q==0 && t==0){\n\t\t\treturn(true);\n\t\t}\n\t}else{\n\t\tif(perm[q]>l || twst[t]>l) return(false);\n\t\tvar p,s,a,m;\n\t\tfor(m=0;m<3;m++){\n\t\t\tif(m!=lm){\n\t\t\t\tp=q; s=t;\n\t\t\t\tfor(a=0;a<3;a++){\n\t\t\t\t\tp=permmv[p][m];\n\t\t\t\t\ts=twstmv[s][m];\n\t\t\t\t\tsol[d]=10*m+a;\n\t\t\t\t\tif(search(d+1,p,s,l-1,m)) return(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn(false);\n}\n\nfunction calcperm(){\n\t//calculate solving arrays\n\t//first permutation\n\tperm=new Array();\n\ttwst=new Array();\n\tpermmv=new Array()\n\ttwstmv=new Array();\n\tfor(var p=0;p<5040;p++){\n\t\tperm[p]=-1;\n\t\tpermmv[p]=new Array();\n\t\tfor(var m=0;m<3;m++){\n\t\t\tpermmv[p][m]=getprmmv(p,m);\n\t\t}\n\t}\n\tperm[0]=0;\n\tfor(var l=0;l<=6;l++){\n\t\tvar n=0;\n\t\tfor(var p=0;p<5040;p++){\n\t\t\tif(perm[p]==l){\n\t\t\t\tfor(var m=0;m<3;m++){\n\t\t\t\t\tvar q=p;\n\t\t\t\t\tfor(var c=0;c<3;c++){\n\t\t\t\t\t\tvar q=permmv[q][m];\n\t\t\t\t\t\tif(perm[q]==-1) { perm[q]=l+1; n++; }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//then twist\n\tfor(var p=0;p<729;p++){\n\t\ttwst[p]=-1;\n\t\ttwstmv[p]=new Array();\n\t\tfor(var m=0;m<3;m++){\n\t\t\ttwstmv[p][m]=gettwsmv(p,m);\n\t\t}\n\t}\n\ttwst[0]=0;\n\tfor(var l=0;l<=5;l++){\n\t\tvar n=0;\n\t\tfor(var p=0;p<729;p++){\n\t\t\tif(twst[p]==l){\n\t\t\t\tfor(var m=0;m<3;m++){\n\t\t\t\t\tvar q=p;\n\t\t\t\t\tfor(var c=0;c<3;c++){\n\t\t\t\t\t\tvar q=twstmv[q][m];\n\t\t\t\t\t\tif(twst[q]==-1) { twst[q]=l+1; n++; }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction getprmmv(p,m){\n\t//given position p<5040 and move m<3, return new position number\n\tvar a,b,c,q;\n\t//convert number into array;\n\tvar ps=new Array()\n\tq=p;\n\tfor(a=1;a<=7;a++){\n\t\tb=q%a;\n\t\tq=(q-b)/a;\n\t\tfor(c=a-1;c>=b;c--) ps[c+1]=ps[c];\n\t\tps[b]=7-a;\n\t}\n\t//perform move on array\n\tif(m==0){\n\t\t//U\n\t\tc=ps[0];ps[0]=ps[1];ps[1]=ps[3];ps[3]=ps[2];ps[2]=c;\n\t}else if(m==1){\n\t\t//R\n\t\tc=ps[0];ps[0]=ps[4];ps[4]=ps[5];ps[5]=ps[1];ps[1]=c;\n\t}else if(m==2){\n\t\t//F\n\t\tc=ps[0];ps[0]=ps[2];ps[2]=ps[6];ps[6]=ps[4];ps[4]=c;\n\t}\n\t//convert array back to number\n\tq=0;\n\tfor(a=0;a<7;a++){\n\t\tb=0;\n\t\tfor(c=0;c<7;c++){\n\t\t\tif(ps[c]==a)break;\n\t\t\tif(ps[c]>a)b++;\n\t\t}\n\t\tq=q*(7-a)+b;\n\t}\n\treturn(q)\n}\n\nfunction gettwsmv(p,m){\n\t//given orientation p<729 and move m<3, return new orientation number\n\tvar a,b,c,d,q;\n\t//convert number into array;\n\tvar ps=new Array()\n\tq=p;\n\td=0;\n\tfor(a=0;a<=5;a++){\n\t\tc=Math.floor(q/3);\n\t\tb=q-3*c;\n\t\tq=c;\n\t\tps[a]=b;\n\t\td-=b;if(d<0)d+=3;\n\t}\n\tps[6]=d;\n\t//perform move on array\n\tif(m==0){\n\t\t//U\n\t\tc=ps[0];ps[0]=ps[1];ps[1]=ps[3];ps[3]=ps[2];ps[2]=c;\n\t}else if(m==1){\n\t\t//R\n\t\tc=ps[0];ps[0]=ps[4];ps[4]=ps[5];ps[5]=ps[1];ps[1]=c;\n\t\tps[0]+=2; ps[1]++; ps[5]+=2; ps[4]++;\n\t}else if(m==2){\n\t\t//F\n\t\tc=ps[0];ps[0]=ps[2];ps[2]=ps[6];ps[6]=ps[4];ps[4]=c;\n\t\tps[2]+=2; ps[0]++; ps[4]+=2; ps[6]++;\n\t}\n\t//convert array back to number\n\tq=0;\n\tfor(a=5;a>=0;a--){\n\t\tq=q*3+(ps[a]%3);\n\t}\n\treturn(q);\n}"
}