{
    "name": "golf.submit",
    "command": "IRC.auth();\n\nconst { getTask } = IRC.require('golf.tasks');\nconst { getLeaderboard, getScores, setScores } = IRC.require('golf.store');\n\nconst [taskName, ...solutionList] = input.split` `;\nconst solution = solutionList.join` `;\nconst { from } = IRC.message;\nconst bytes = byteCount(solution);\nconst task = getTask(taskName);\nif (!task) throw 'Please choose a valid task';\ntask.test(solution);\n\nconst scores = getScores(taskName);\n\nconst publicName = '##jsgolf';\nconst isPrivate = IRC.message.to !== '##jsgolf';\n\nconst isDev = true;\n\n// task.public\n\nif (isDev || scores[from] == undefined) { \n    scores[from] = {\n        bytes,\n        solution,\n        timestamp: (new Date).toISOString(),\n    };\n    setScores(taskName, scores);\n    print(`{g}correct!{/} your score is {dc}${bytes}{/}`);\n    notifyChannel({ from, bytes, taskName, saved: 0 });\n} else {\n    if (scores[from].bytes < bytes) {\n        isPrivate && print('{y}correct{/}, {dc}' +bytes + '{/}. but you have a better score of {dc}'+ scores[from].bytes + '{/}')\n    } else {\n        const oldScore = scores[from].bytes;\n\n        if (oldScore === bytes) {\n            isPrivate && print('{y}correct{/}, but you already have a score of {dc}' +bytes + '{/} {gr}(your solution has been updated){/}')\n            scores[from].solution = solution;\n            // TODO: notify channel score is the same\n            setScores(taskName, scores);\n        } else {\n            const saved = oldScore - bytes;\n            isPrivate && print(`{g}correct!{/} you saved {dc}${saved}{/} ${plural('byte', saved)} for a new score of {dc}${bytes}{/}`);\n            scores[from] = {\n                bytes,\n                solution,\n                timestamp: (new Date).toISOString(),\n            };\n            setScores(taskName, scores);\n            notifyChannel({ from, bytes, taskName, saved });\n        }\n    }\n}\n\nfunction ordinal(n) {\n    var s=[\"th\",\"st\",\"nd\",\"rd\"],v=n%100;\n    return n+(s[(v-20)%10]||s[v]||s[0]);\n}\n\nfunction plural(str, n) {\n    return str + (n > 1 ? 's' : '');\n};\n\nfunction byteCount(s) {\n    return encodeURI(s).split(/%..|./).length - 1;\n}\n\nfunction notifyChannel({ bytes, taskName, from, saved }) {\n    const leaderboard = getLeaderboard(taskName);\n    const { rank, position, scores } = leaderboard.find(d => d.bytes === bytes);\n\n    const colours = ['{y}','{gr}','{o}'];\n    const wr = rank === 1 && scores.length === 1;\n    const rankStr = rank < 4\n        ? `  (${colours[rank-1]||'{bo}'}${ordinal(rank)} place${[...'ðŸ¥‡ðŸ¥ˆðŸ¥‰'][rank-1]}{/})`\n        : '';\n    const wrStr = wr ? ' {g,bl}{rb} World Record! {/}' : '';\n\n    const who = IRC.colors.nick(from, true);\n    const action = saved \n        ? `saved {dc}${saved}{/} ${plural('byte', saved)} for a new score of {dc}${bytes}{/}`\n        : `got a score of {dc}${bytes}{/}`;\n    const location = `on ${IRC.colors.nick(taskName, false)}`;\n    const annotations = `${rankStr}${wrStr}`;\n\n    const target = isDev ? undefined : '##jsgolf';\n    print(`${who} ${action} ${location} ${annotations}`, { target })\n}",
    "locked": false,
    "starred": false
}