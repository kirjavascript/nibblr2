{
    "name": "golf.submit",
    "command": "IRC.auth();\n\nconst { getTask } = IRC.require('golf.tasks');\nconst { ordinal, plural, byteCount } = IRC.require('golf.util');\nconst { getLeaderboard, getScores, setScores } = IRC.require('golf.store');\n\nconst [taskName, ...solutionList] = input.split` `;\nconst solution = solutionList.join` `;\nconst bytes = byteCount(solution);\nconst task = getTask(taskName);\n\ntask.public = false;\n\nconst isPrivate = IRC.message.to !== '##jsgolf';\nconst from = task.public ? '##jsgolf' : IRC.message.from;\n\nif (!task) throw 'Please choose a valid task';\nif (!task.public && !isPrivate) throw 'submit private tasks via PM';\n\n// can submit \n\ntask.test(solution);\nconst scores = getScores(taskName);\n\nconst isDev = true;\n\n// task.public\n\nif (scores[from] == undefined) { \n    scores[from] = {\n        bytes,\n        solution,\n        timestamp: (new Date).toISOString(),\n        history: [],\n    };\n    setScores(taskName, scores);\n    isPrivate && print(`{g}correct!{/} your score is {dc}${bytes}{/}`);\n    notifyChannel({ from, bytes, taskName, saved: 0 });\n} else {\n    if (scores[from].bytes < bytes) {\n        isPrivate && print('{y}correct{/}, {dc}' +bytes + '{/}. but you have a better score of {dc}'+ scores[from].bytes + '{/}')\n    } else {\n        const oldScore = scores[from].bytes;\n\n        if (oldScore === bytes) {\n            isPrivate && print('{y}correct{/}, but you already have a score of {dc}' +bytes + '{/} {gr}(your solution has been updated){/}')\n            if (\n                scores[from].solution !== solution\n                && !scores[from].history.includes(scores[from].solution)\n            ) {\n                scores[from].history.push(scores[from].solution);\n            }\n            scores[from].solution = solution;\n            // TODO: notify channel score is the same if task is public\n            setScores(taskName, scores);\n        } else {\n            const saved = oldScore - bytes;\n            isPrivate && print(`{g}correct!{/} you saved {dc}${saved}{/} ${plural('byte', saved)} for a new score of {dc}${bytes}{/}`);\n            const { history, solution: oldSolution } = scores[from];\n            history.push(oldSolution);\n            scores[from] = {\n                bytes,\n                solution,\n                timestamp: (new Date).toISOString(),\n                history,\n            };\n            setScores(taskName, scores);\n            notifyChannel({ from, bytes, taskName, saved });\n        }\n    }\n}\n\nfunction notifyChannel({ bytes, taskName, from, saved }) {\n    const leaderboard = getLeaderboard(taskName);\n    const { rank, position, scores } = leaderboard.find(d => d.bytes === bytes);\n\n    const colours = ['{y}','{gr}','{o}'];\n    const wr = rank === 1 && scores.length === 1;\n    const rankStr = rank < 4\n        ? `  (${colours[rank-1]||'{bo}'}${ordinal(rank)} place${[...'ðŸ¥‡ðŸ¥ˆðŸ¥‰'][rank-1]}{/})`\n        : '';\n    const wrStr = wr ? ' {g,bl}{rb} World Record! {/}' : '';\n\n    const who = IRC.colors.nick(from, true); // TODO: change to from\n    const action = saved \n        ? `saved {dc}${saved}{/} ${plural('byte', saved)} for a new score of {dc}${bytes}{/}`\n        : `got a score of {dc}${bytes}{/}`;\n    const location = `on ${IRC.colors.nick(taskName, false)}`;\n    const annotations = `${rankStr}${wrStr}`;\n\n    const target = isDev ? undefined : '##jsgolf';\n    print(`${who} ${action} ${location} ${annotations}`, { target })\n}",
    "locked": false,
    "starred": false
}