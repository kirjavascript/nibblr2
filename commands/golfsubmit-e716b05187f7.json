{
    "name": "golf.submit",
    "command": "IRC.auth();\n\nconst { getTask } = IRC.require('golf.tasks');\nconst { getLeaderboard, getScores, setScores } = IRC.require('golf.store');\n\nconst [taskName, ...solutionList] = input.split` `;\nconst solution = solutionList.join` `;\nconst { from } = IRC.message;\nconst bytes = byteCount(solution);\nconst task = getTask(taskName);\nif (!task) throw 'Please choose a valid task';\ntask.test(solution);\n\nconst scores = getScores(taskName);\n\nconst publicName = '##jsgolf';\nconst isPrivate = IRC.message.to !== '##jsgolf';\n\nconst isDev = true;\n\n\n// task.public\n\nif (isDev || scores[from] == undefined) { \n    scores[from] = {\n        bytes,\n        solution,\n        timestamp: (new Date).toISOString(),\n    };\n    setScores(taskName, scores);\n    print(`{g}correct!{/} your score is {dc}${bytes}{/}`);\n    notifyChannel({ from, bytes, taskName, scores });\n} else {\n    if (scores[from].bytes < bytes) {\n        isPrivate && print('{y}correct{/}, {dc}' +bytes + '{/}. but you have a better score of {dc}'+ scores[from].bytes + '{/}')\n    } else {\n        const oldScore = scores[from].bytes;\n\n        if (oldScore === bytes) {\n            isPrivate && print('{y}correct{/}, but you already have a score of {dc}' +bytes + '{/} {gr}(your solution has been updated){/}')\n            scores[from].solution = solution;\n            // TODO: notify channel score is the same\n            setScores(taskName, scores);\n        } else {\n            const saved = oldScore - bytes;\n            isPrivate && print(`{g}correct!{/} you saved {dc}${saved}{/} byte${saved>1?'s':''} for a new score of {dc}${bytes}{/}`);\n            scores[from] = {\n                bytes,\n                solution,\n                timestamp: (new Date).toISOString(),\n            };\n            setScores(taskName, scores);\n            notifyChannel({ from, bytes, taskName, scores, oldScore });\n        }\n\n    }\n}\n\nfunction ordinal(n) {\n    var s=[\"th\",\"st\",\"nd\",\"rd\"],v=n%100;\n    return n+(s[(v-20)%10]||s[v]||s[0]);\n}\n\nfunction notifyChannel({ bytes, taskName, from, scores, oldScore }) {\n    const leaderboard = getLeaderboard(taskName);\n    const { rank: place, position } = leaderboard.find(d => d.bytes === bytes);\n\n    const colours = ['{y}','{gr}','{o}'];\n    const placeStr = place < 4 ? `  (${colours[place-1]||'{bo}'}${ordinal(place)} place${[...'ðŸ¥‡ðŸ¥ˆðŸ¥‰'][place-1]}{/})` : '';\n\n    // const score = \n    // rank, position, world record\n\n    const target = isDev ? undefined : '##jsgolf';\n    if (oldScore) {\n        const saved = oldScore - bytes;\n        print(`${IRC.colors.nick(from, true)} saved {dc}${saved}{/} byte${saved>1?'s':''} for a new score of {dc}${bytes}{/} on ${IRC.colors.nick(taskName, false)} ${placeStr}`, { target });\n\n    } else {\n        print(`${IRC.colors.nick(from, true)} got a score of {dc}${bytes}{/} on ${IRC.colors.nick(taskName, false)} ${placeStr}`, { target });\n    }\n}\n\nfunction byteCount(s) {\n    return encodeURI(s).split(/%..|./).length - 1;\n}",
    "locked": false,
    "starred": false
}