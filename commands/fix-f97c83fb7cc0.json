{
    "locked": false,
    "starred": false,
    "name": "fix",
    "command": "k = 0\n\nfunction scanExpr(delim, sfx) {\n    bs = false\n    ended = false\n    s = delim\n    \n    for (; !ended && k < input.length; ++k) {\n        c = input.charAt(k)\n        switch (c) {\n        case '\\\\':\n            bs = !bs\n            if (!bs) {\n                s += c\n            }\n            break\n        case delim:\n            if (bs) {\n                s += '\\\\'\n            }\n            else {\n                ended = true\n            }\n            s += c\n            bs = false\n            break\n        default:\n            if (bs) {\n                s += '\\\\'\n            }\n            s += c\n            bs = false\n        }\n    }\n    if (!ended) {\n        throw \"unfinished string or regex\"\n    }\n    for (; k < input.length; ++k) {\n        c = input.charAt(k)\n        if (c == ' ') {\n            break\n        }\n        if (sfx && c >= 'a' && c <= 'z') {\n            s += c\n        }\n        else {\n            throw \"huh?\"\n        }\n    }\n    //print(s)\n    return eval(s)\n}\n\nfunction scan() {\n    while (true) {\n        c = input.charAt(k++)\n        switch (c) {\n        case ' ':\n            continue\n        case \"'\":\n        case '\"':\n        case '`':\n            return scanExpr(c)\n        case '/':\n            return scanExpr(c, true)\n        }\n        break\n    }\n    s = c\n    for (; k < input.length; ++k) {\n        c = input.charAt(k)\n        if (c == ' ') {\n            return s\n        }\n        s += c\n    }\n    return s\n}\n\nif (!input) {\n    throw new Error(`usage: ${IRC.colors.cmd('fix', 'search substring-or-regex replacement', 'user, offset')}`)\n}\n\nsearch = scan()\nregex = scan()\nreplace = scan()\n\nconst [user, offset] = IRC.command.params\nconst {from} = IRC.message\nu = user || from\nmsg = u == from ? `${from} meant to say: ` : `${from} thinks ${user} meant to say: `\nline = IRC.log.user(u, search, 1, offset || 0)[0].message\n//line = IRC.log.getGlobal(search, 1, offset || 0)[0].message\nif (!line) {\n    throw \"not found\"\n}\n\nprint(msg + line.replace(regex, replace))\n"
}