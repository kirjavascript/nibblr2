{
    "name": "golf.eval",
    "command": "module.exports = (solution, callback) => {\n    // patch env\n    const env = {...global};\n    Object.keys(global).forEach(key => delete global[key]);\n    // run code\n    let result;\n    try {\n        // indirect eval for global scope (no access to env)\n        result = (void 0,eval)(solution);\n    } catch (e) {\n        throw new Error('error parsing script: '+ String(e.message || e).toLowerCase());\n    }\n    try {\n        callback(wrapFreshEnv(result, solution));\n    } catch (e) {\n        // restore the env if we get an error during the callback\n        Object.assign(global, env);\n        throw e;\n    }\n    // restore env\n    Object.assign(global, env);\n}\nif (!module.required) {\n    const _print = print;\n    module.exports(input, result => {\n        _print.log(result);\n    });\n}\n\nfunction wrapFreshEnv(result, solution) {\n    if (typeof result == 'function') {\n        return (...args) => {\n            const value = (void 0,eval)(solution)(...args);\n            Object.keys(global).forEach(key => delete global[key]);\n            return value;\n        };\n    } else {\n        return result;\n    }\n}\n",
    "locked": false,
    "starred": false
}