{
    "name": "roulette",
    "command": "IRC.colors.leaderboard = () => {};\n\nconst useGame = () => IRC.require('module.loadObject')('game', {\n    isRunning: false,\n    scores: {},\n    bets: {},\n    history: [],\n});\n\nconst [game, setGame] = useGame();\n\nconst numbers = [0,32,15,19,4,21,2,25,17,34,6,27,13,36,11,30,8,23,10,5,24,16,33,1,20,14,31,9,22,18,29,7,28,12,35,3,26];\n\nconst isRed = (num) => (\n    ((num >= 1 && num <= 10 || num >= 19 && num <= 28) && num & 1)\n    || (num >= 11 && num <= 18 || num >= 29 && num <= 36) && !(num & 1)\n);\n\nconst isBlack = (num) => num !== 0 && !isRed(num);\n\nconst isValidLocation = (str) => /even|odd|\\d+|red|black|low|high/.test(str);\n\nconst spin = () => 0|Math.random()*37;\n\nconst renderNumber = (num, withBall = false) => {\n    const ball = withBall ? '● ' : '';\n    if (!num) return `{w,dg} ${num} ${ball}{/}`;\n    if (isRed(num)) return `{w,r} ${num} ${ball}{/}`;\n    else return `{w,bl} ${num} ${ball}{/}`;\n};\n\nconst [amount, ...locList] = input.trim().split(/\\s+/);\nconst locations = locList.filter(isValidLocation);\n\nif (!locations.length) {\n    throw 'board locations are: number, red, black, even, odd, low, high - place bets with ' + IRC.colors.cmd('roulette', ['amount', 'location(s)'])\n}\n\n// min bet on red is 10\n// min bet on num is 1\n\nif (!game.isRunning) {\n    game.isRunning = true;\n    setGame(game);\n    {\n        sleep(10000);\n        const [game, setGame] = useGame();\n        const num = spin();\n        // show board\n        print(numbers.map(d => (\n            renderNumber(d, d == num)\n        )).join``);\n\n        // show board\n        // calculate scores...\n        game.bets = {};\n        game.isRunning = false;\n        setGame(game);\n    }\n}\n",
    "locked": true,
    "starred": false
}