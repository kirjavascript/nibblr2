{
    "name": "roulette",
    "command": "const { useGame, isRed, renderNumber, renderLocation, spin, isValidLocation, numbers, fmtNum } = IRC.require('roulette.game');\n\nconst [game, setGame] = useGame();\n\nconst { from: user } = IRC.message;\n\n// housekeeping\n\nif (typeof game.scores[user] == 'undefined') game.scores[user] = 1000;\nif (game.scores[user] <= 0) {\n    if (typeof game.rebuys[user] == 'undefined') game.rebuys[user] = 1;\n    else game.rebuys[user] += 1;\n    print(`${IRC.colors.nick(user, false)} bought back in for {y}$1000{/} ({dc}${game.rebuys[user]}{/} rebuys)`);\n    game.scores[user] = 1000;\n    setGame(game);\n}\n\n// get input\n\nconst [amountRaw, ...locList] = input.trim().split(/\\s+/);\nconst locations = locList.filter(isValidLocation);\nconst amount = parseInt(amountRaw, 10);\nconst totalAmount = amount * locations.length;\n\n// assertions\n\nif (!locations.length) {\n    throw 'board locations are: 0-36, red, black, even, odd, low, high - place bets with ' + IRC.colors.cmd('roulette', ['amount', 'location(s)'])\n}\nif (amount < 1 || isNaN(amount)) {\n    throw 'bet at least 1';\n}\nif (game.scores[user] < totalAmount) {\n    throw `you can\\'t afford to bet that much - you have ${fmtNum(game.scores[user])}`;\n}\nif (locations.some(d => Number.isNaN(parseInt(d, 10))) && amount < 10) {\n    throw 'minimum amount for non-numbers is {y}$10{/}';\n}\n\n// count plays\n\nif (typeof game.bets[user] == 'undefined') {\n    if (typeof game.plays[user] == 'undefined') game.plays[user] = 1;\n    else game.plays[user] += 1;\n}\n\n// assign bets\n\nif (!game.bets[user]) game.bets[user] = {};\ngame.house += totalAmount;\ngame.scores[user] -= totalAmount;\nlocations.forEach(loc => {\n    if (!game.bets[user][loc]) {\n        game.bets[user][loc] = amount;\n    } else {\n        game.bets[user][loc] += amount;\n    }\n});\n\n\nconst betsMade = Object\n    .entries(game.bets[user])\n    .map(([key, value]) => `${fmtNum(value)} ${renderLocation(key)}`)\n    .join` `;\n\nprint('{g}Bets by ' + IRC.colors.nick(user, false) + ' - ' + betsMade + (!game.isRunning ? ' - {g}Faites votre jeu!' : ''));\n\nsetGame(game);\n\nif (!game.isRunning) {\n    game.isRunning = true;\n    IRC.require('module.count').next();\n    setGame(game);\n    {\n        sleep(28000);\n        const [game, setGame] = useGame();\n        const num = spin();\n        // show board\n        print(numbers.map(d => renderNumber(d, d == num)).join``);\n        // show number, then zero or black/red even/odd low/high\n        const [highlow, redblack, oddeven] = [\n            num >= 19 ? 'high' : 'low',\n            isRed(num) ? 'red' : 'black',\n            num & 1 ? 'odd' : 'even',\n        ];\n        print(`\n            {g}Winning locations{/} -\n            ${renderNumber(num)}\n            ${num != 0 ? `\n                ${renderLocation(highlow)}\n                ${renderLocation(redblack)}\n                ${renderLocation(oddeven)}\n            ` : '{g}Only zero wins!'}\n        `.split('\\n').map(d => d.trim()).filter(Boolean).join` `)\n        // calculate scores...\n        let hasWinners = false;\n        Object.entries(game.bets)\n            .forEach(([user, bets]) => {\n                let payout = 0;\n                if (num == 0 && '0' in bets) {\n                    payout += bets[0] * 35;\n                } else if (num != 0) {\n                    if (num in bets) {\n                        payout += bets[num] * 35;\n                    }\n                    if (highlow in bets) {\n                        payout += bets[highlow] * 2;\n                    }\n                    if (redblack in bets) {\n                        payout += bets[redblack] * 2;\n                    }\n                    if (oddeven in bets) {\n                        payout += bets[oddeven] * 2;\n                    }\n                }\n                if (payout > 0) {\n                    game.house -= payout;\n                    game.scores[user] += payout;\n                    hasWinners = true;\n                    hasWinners = true;\n                    print(`${IRC.colors.nick(user, false)} {g}won ${fmtNum(payout)}{g}!`);\n                }\n            });\n        if (!hasWinners) {\n            print(`{g}No winners - better luck next time!`);\n        }\n        game.bets = {};\n        game.isRunning = false;\n        // track the last 100 games\n        game.history.push(num);\n        if (game.history.length > 100) {\n            game.history.shift();\n        }\n        setGame(game);\n    }\n}\n",
    "locked": true,
    "starred": true
}