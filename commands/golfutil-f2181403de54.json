{
    "locked": false,
    "starred": false,
    "name": "golf.util",
    "command": "const { inspect } = IRC;\n\nconst stringify = (obj) => {\n    return inspect(obj, {\n        colors: false,\n        depth: 0,\n        truncate: 100,\n    });\n};\n\nfunction removeEval() {\n    const _eval = eval;\n    const _function = Function;\n    const stub = eval = Function = function(){throw 'eval disabled'};\n    const _fns = [\n        function(){},\n        async function(){},\n        function*(){},\n        async function*(){},\n    ];\n    const _constructors = _fns.map(fn => {\n        const proto = Object.getPrototypeOf(fn);\n        const _constructor = proto.constructor;\n        delete proto.constructor;\n        proto.constructor = stub;\n        return [_constructor, proto];\n    });\n    return () => {\n        eval = _eval;\n        Function = _function;\n        _constructors.forEach(([c, p], i) => {\n            p.constructor = c;\n        });\n    };\n}\n\nfunction assertType(a, type) {\n    if (typeof a !== type) {\n        throw new Error(`expected {dc}${type}{/} got {o}${typeof a}{/}`);\n    }\n}\n\nfunction assertEq(a, b) {\n    if (!isEqual(a, b)) {\n        throw new Error(`expected {dc}${stringify(b)}{/} got {o}${stringify(a)}{/}`);\n    }\n}\nfunction assertCall(result, expected, ...args) {\n    const output = result(...args);\n    if (!isEqual(expected, output)) {\n        const params = args.map(stringify).join`, `;\n        throw new Error(`expected {dc}${stringify(expected)}{/} got {o}${stringify(output)}{/}  (params: {dp}${params}{/})`);\n    }\n}\n\nconst { isEqual } = _;\n\nBigInt.prototype.toJSON = function() { return `${this}n`; };\n\nmodule.exports = {\n    stringify,\n    isEqual,\n    assertType,\n    assertEq,\n    assertCall,\n    removeEval,\n};"
}