{
    "name": "blockmatrix",
    "command": "/*\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░████░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░█████████░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░███░░░░░░█░░░░░░░░░░░░░░░░░░░░\n░░░░░░███░░░░░░░░██░░░░░░░░░░░░░░░░░░░\n░░░░░██░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░\n░░░░██░░░░░░░░░░░░░█░░░░░░░░░░░░░░░░░░\n░░░░█░░░░░░░░░░█░░░█░░░░░░░░░░░░░░░░░░\n░░░███░█░░░░░██░█░░█░░░░░░░░░░░░░░░░░░\n░░░███░██░░█░███░░░█░░░░░░░░░░░░░░░░░░\n░░░██░██░░░█░███░░░█░░░░░░░░░░░░░░░░░░\n░░█░░░██░░░░░░░░░░█░░░░░░░░░░░░░░░░░░░\n░█░░░█░█░░░█░░██░░█░░░░░░░░░░░░░░░░░░░\n░█░░░░███░░░░██░░░░█░░░░░░░░░░░░░░░░░░\n░██░░░░░░░░██░██░░░█░░░░░░░░░░░░░░░░░░\n░██████████████░░░░█░░░░░░░░░░░░░░░░░░\n░█░░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░██░░░\n░█░░░░░░░░░░░░░░░░░█░░░░░░░░░░░░██░█░░\n███░░░░░░░░░░░░░░░░█░░░░░░░░░░░░█░░██░\n██░░░░░░░░░░░░░░░░░█░░░░░░░░░░░░█░░░█░\n██░░░░░░░░░░░░░█░░██░░░░░░░░░░░██░░░█░\n██░░░░░░░░░░░█░█░░░█░░░░░░░░░░░██░░░█░\n██░░░░░░░░░░░█░█░░░█░░░░░░░░░░██░░░██░\n██░░░░░░░░░░░█░█░░░█░░░░░░░░░░█░░░██░░\n██░░░░░░░░░░░█░█░░░████████████░░░█░░░\n██░░░░░░░░░░░█░█░░░███░░░░░░█░░░░██░░░\n░█░░░░░░░░░░░█░█░░░█░░░██░░░░█░░░███░░\n░█░░░░░░░░░░░█░█░░░█░░░░░█████░░░░░██░\n░██░░░░░░░░░░█░█░░░░░░███░░░███░░░░░█░\n░██░░░░░░░░░░█░█░░░░░░░░░░░░░███░░███░\n░█░░░░░░░░░░░█░███░░░░░░░░░░░░░██░░░█░\n░██░░░░░░░░██░░░░█░░░░░░██░░░░░░█░░░██\n░░█░░░░░░░░█░░░░██░░░░░░░░░░░░░░██░░░█\n░░██░░░░░░░███████░░░░░░░░░░░░░░█████░\n░░░██░░░░░░░░███░░░░░░░██░░░░░░░█░░░░░\n░░░██░░░░░░░░░░░░░░░░░█░░░░░░░░░█░░░░░\n░░░░██░░░░░░░░░░░░░░░░░░█░░░░░░██░░░░░\n░░░░░██░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░\n░░░░░░██░░░░░░░░░░░░░░░░░░░░███░░░░░░░\n░░░░░░░░██░░█░░░░░░░░░░░░░░██░░░░░░░░░\n░░░░░░░░░█████░░█░░░░░███████░░░░░░░░░\n░░░░░░░░███░░████████░█░░░░░░░░░░░░░░░\n░░░░░░░░███░░░░░░░░█░██░░░░░░░░░░░░░░░\n░░░███░████░░░░░██░█░░█░░░░░░░░░░░░░░░\n░░░█░███░█░░░░░░████░█░░░░░░░░░░░░░░░░\n░░░░█░░░░█░░░░░░█░░░░█░░░░░░░░░░░░░░░░\n░░░░██░░██░░░░░░██░░░█░░░░░░░░░░░░░░░░\n░░░░█████░░░░░░░░██░░█░░░░░░░░░░░░░░░░\n░░░░░░░█░░░░░░░░░░███░░░░░░░░░░░░░░░░░\n*/\n[binary, width] = input.split(/\\s+/)\n\nconst blocks = [ ' ', '\\u2598', '\\u259d', '\\u2580',\n                 '\\u2596', '\\u258c', '\\u259e', '\\u259b',\n                 '\\u2597', '\\u259a', '\\u2590', '\\u259c',\n                 '\\u2584', '\\u2599', '\\u259f', '\\u2588'\n                 ]\n\nlet rowCount = binary.length/width\nlet colCount = binary.length/rowCount\n\nlet output = ''\n\nfor(let y=0; y<rowCount; y+=2) {\n    let value = 0\n\n    for(let x=0; x<colCount; x+=2) {\n        value = parseInt(`${binary[(y+1)*colCount+x+1]+binary[(y+1)*colCount+x]+binary[y*colCount+x+1]+binary[y*colCount+x]}`, 2)\n\n        output += blocks[value]\n    }\n    output += '\\n'\n}\n\nprint( output)\n\n//print( blocks.map( (c, i) => [c, i]))\n// ▖ ▗ ▘ ▙ ▚ ▛ ▜ ▝ ▞ ▟ ▀ ▄ █ ▌ ▐\n\n// 000000111101101111000000010101101010\n\n// 000000000000\n// 000000000000\n// 001110011100\n// 011111111110\n// 011111111110\n// 001111111100\n// 000111111000\n// 000011110000\n// 000001100000\n// 000000000000",
    "locked": false,
    "starred": false
}