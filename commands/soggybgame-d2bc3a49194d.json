{
    "name": "soggyb.game",
    "command": "if (IRC.message.isPM) {\r\n    throw new Error('if you play alone you always \"win\"');\r\n}\r\n\r\nconst { getScore, setScore, addScore } = IRC.require('soggyb.score')\r\n\r\nconst isRunning = () => {\r\n  return typeof store.get('game') !== 'undefined'\r\n}\r\n\r\nconst reset = () => {\r\n  store.set('game', undefined)\r\n}\r\n\r\nconst cmd = (str) => IRC.colors.cmd('soggyb.' + str)\r\n\r\nthis.Game = this.Game || class {\r\n  constructor () {\r\n    this.save = () => {\r\n      const data = JSON.stringify(this)\r\n      store.set('game', data)\r\n      return this\r\n    }\r\n    this.load = () => {\r\n      const data = store.get('game')\r\n      if (data) {\r\n        Object.assign(this, JSON.parse(data))\r\n      } else {\r\n        throw new Error('no soggy biscuit game is running. Probably nobody wants to play with you either.')\r\n      }\r\n      return this\r\n    }\r\n    this.new = () => {\r\n      IRC.require('module.count').next()\r\n      this.players = []\r\n      this.losers = []\r\n      this.status = 'joining'\r\n      this.playerIndex = 0\r\n      print(`{w,b} Soggy Biscuit {/}`)\r\n      print(`use ${IRC.colors.cmd('soggyb')} to join the game and ${cmd('start')} to begin the game`)\r\n\r\n      return this.save()\r\n    }\r\n    this.addPlayer = (name) => {\r\n      this.players.push({\r\n        name,\r\n        faps: 0,\r\n        lastFap: new Date().getTime(),\r\n        status: false\r\n      })\r\n      return this.save()\r\n    }\r\n    this.startRound = () => {\r\n      if (game.players.length < 2) { // 2\r\n        throw new Error('if you play soggy biscuit on your own, you\\'re always the \"winner\"')\r\n      } else if (game.status == 'joining') {\r\n        print(`Players: ${game.players.map(d => `{y}${d.name}{/}`).join`, `} {dgr}*biscuit is ready*{/} commence {dc}fapping{/}`)\r\n        print(`use ${cmd('fap')} to fap`)\r\n        this.status = 'open'\r\n      }\r\n      return this.checkEjaculation()\r\n    }\r\n\r\n    this.fap = () => {\r\n      const name = IRC.message.from\r\n      this.assertCanFap(name)\r\n      const player = this.players.find(d => d.name == name)\r\n\r\n      const now = new Date()\r\n\r\n      const fapDelta = now.getTime() - player.lastFap\r\n\r\n      player.lastFap = now.getTime()\r\n\r\n      //print('Fap delta: ' + fapDelta + ' Last fap: ' + player.lastFap + ' Right now: ' + now.getTime() + ' Faps: ' + player.faps)\r\n\r\n      if (fapDelta < 1000) {\r\n        print(player.name + ' is fapping too fast! He must be really into this!')\r\n      } else {\r\n        player.faps += 1\r\n        const fap = Math.floor(Math.random() * 20)\r\n\r\n        print(player.name + ': *fap*')\r\n\r\n        if (fap === 7) {\r\n          print(player.name + ' ejaculated!')\r\n          print(player.name + ' lost! His boyfriend is so unlucky :(')\r\n          this.losers.push(player)\r\n          const i = this.players.findIndex(d => d == player)\r\n          this.players.splice(i, 1)\r\n        }\r\n        this.checkEjaculation()\r\n      }\r\n    }\r\n\r\n    this.checkEjaculation = () => {\r\n      const playersLeft = this.players.filter(d => d.status == false)\r\n\r\n      if (playersLeft.length == 1) {\r\n        print('{w,b}Congratulations '+ this.players[0].name +' you\\'re \"winner\"{/}')\r\n        print('You lasted the longest so you get the prize')\r\n        addScore(this.players[0].name, 1)\r\n        reset()\r\n      } else {\r\n          this.save()\r\n      }\r\n    }\r\n\r\n    this.assertCanFap = (name, type) => {\r\n      if (!isRunning()) {\r\n        throw new Error('biscuit is not ready')\r\n      } else if (!this.players.some(d => d.name == name)) {\r\n        throw new Error('you are not playing or you already jizzed lol')\r\n      } else if (this.status == 'joining') {\r\n        throw new Error('pants on. Game hasn\\'t started yet')\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nthis.Game.reset = reset\r\nthis.Game.isRunning = isRunning\r\n",
    "locked": false,
    "starred": false
}