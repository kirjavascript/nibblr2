{
    "name": "soggyb.game",
    "command": "if (IRC.message.isPM) {\n    throw new Error('if you play alone you always \"win\"');\n}\n\nconst { getScore, setScore, addScore } = IRC.require('soggyb.score')\n\nconst isRunning = () => {\n  return typeof store.get('game') !== 'undefined'\n}\n\nconst reset = () => {\n  store.set('game', undefined)\n}\n\nconst cmd = (str) => IRC.colors.cmd('soggyb.' + str)\n\nthis.Game = this.Game || class {\n  constructor () {\n    this.save = () => {\n      const data = JSON.stringify(this)\n      store.set('game', data)\n      return this\n    }\n    this.load = () => {\n      const data = store.get('game')\n      if (data) {\n        Object.assign(this, JSON.parse(data))\n      } else {\n        throw new Error('no soggy biscuit game is running. Probably nobody wants to play with you either.')\n      }\n      return this\n    }\n    this.new = () => {\n      IRC.require('module.count').next()\n      this.players = []\n      this.losers = []\n      this.status = 'joining'\n      this.playerIndex = 0\n      print(`{w,b} Soggy Biscuit {/}`)\n      print(`use ${IRC.colors.cmd('soggyb')} to join the game and ${cmd('start')} to begin the game`)\n\n      return this.save()\n    }\n    this.addPlayer = (name) => {\n      this.players.push({\n        name,\n        faps: 0,\n        lastFap: new Date().getTime(),\n        status: false\n      })\n      return this.save()\n    }\n    this.startRound = () => {\n      if (game.players.length < 2) { // 2\n        throw new Error('if you play soggy biscuit on your own, you\\'re always the \"winner\"')\n      } else if (game.status == 'joining') {\n        print(`Players: ${game.players.map(d => `{y}${d.name}{/}`).join`, `} {dgr}*biscuit is ready*{/} commence {dc}fapping{/}`)\n        print(`use ${cmd('fap')} to fap`)\n        this.status = 'open'\n      }\n      return this.checkEjaculation()\n    }\n\n    this.fap = () => {\n      const name = IRC.message.from\n      this.assertCanFap(name)\n      const player = this.players.find(d => d.name == name)\n\n      const now = new Date()\n\n      const fapDelta = now.getTime() - player.lastFap\n\n      player.lastFap = now.getTime()\n\n      //print('Fap delta: ' + fapDelta + ' Last fap: ' + player.lastFap + ' Right now: ' + now.getTime() + ' Faps: ' + player.faps)\n\n      if (fapDelta < 1000) {\n        print(player.name + ' is fapping too fast! He must be really into this!')\n      } else {\n        player.faps += 1\n        const fap = Math.floor(Math.random() * 20)\n\n        print(player.name + ': *fap*')\n\n        if (fap === 7) {\n          print(player.name + ' ejaculated!')\n          print(player.name + ' lost! His boyfriend is so unlucky :(')\n          this.losers.push(player)\n          const i = this.players.findIndex(d => d == player)\n          this.players.splice(i, 1)\n        }\n        this.checkEjaculation()\n      }\n    }\n\n    this.checkEjaculation = () => {\n      const playersLeft = this.players.filter(d => d.status == false)\n\n      if (playersLeft.length == 1) {\n        print('{w,b}Congratulations '+ this.players[0].name +' you\\'re \"winner\"{/}')\n        print('You lasted the longest so you get the prize')\n        addScore(this.players[0].name, 1)\n        reset()\n      } else {\n          this.save()\n      }\n    }\n\n    this.assertCanFap = (name, type) => {\n      if (!isRunning()) {\n        throw new Error('biscuit is not ready')\n      } else if (!this.players.some(d => d.name == name)) {\n        throw new Error('you are not playing or you already jizzed lol')\n      } else if (this.status == 'joining') {\n        throw new Error('pants on. Game hasn\\'t started yet')\n      }\n    }\n  }\n}\n\nthis.Game.reset = reset\nthis.Game.isRunning = isRunning",
    "locked": false,
    "starred": false
}