{
    "name": "bf",
    "command": "/*\n  Brainfuck Interpreter\n  (c) Donald Leung\n  MIT License\n*/\n\nfunction brainfuck(code, input = \"\") {\n  // Sanitize BF code and store as program\n  var program = code.replace(/[^<>+\\-.,\\[\\]]/g, \"\");\n  // Initialize 30,000 cells initially set to 0\n  var array = Array(3e4).fill(0);\n  // Start at cell #0\n  var cellIndex = 0;\n  // Initially read from the first character of the input if \",\" used\n  var inputIndex = 0;\n  // Initial output is empty\n  var output = \"\";\n  // Loop through each character of BF program\n  for (var i = 0; i < program.length; i++) {\n    switch (program[i]) {\n      case \".\":\n      // Print the ASCII value at the current cell\n      if (array[cellIndex] !== 0) output += String.fromCharCode(array[cellIndex]);\n      break;\n      case \",\":\n      // Read one character of input into the current cell\n      array[cellIndex] = (input[inputIndex++] ? input[inputIndex - 1] : String.fromCharCode(0)).charCodeAt();\n      break;\n      case \"+\":\n      // Increment the value at the current cell by 1.  If value exceeds 255 then loop back to 0\n      array[cellIndex]++;\n      if (array[cellIndex] > 255) array[cellIndex] -= 256;\n      break;\n      case \"-\":\n      // Decrement the value at the current cell by 1.  If value drops below 0 then loop back to 255\n      array[cellIndex]--;\n      if (array[cellIndex] < 0) array[cellIndex] += 256;\n      break;\n      case \">\":\n      // Go to the next cell\n      cellIndex++;\n      break;\n      case \"<\":\n      // Go to the previous cell\n      cellIndex--;\n      break;\n      case \"[\":\n      if (array[cellIndex] === 0) {\n        // An unmatched bracket found.  Skip forwards in the BF program until the matching (closing) bracket is found\n        var unmatched = 1;\n        while (unmatched > 0) {\n          // Jump to the next character in the BF program\n          i++;\n          // If the next character is also an opening bracket, there is one more unmatched bracket\n          if (program[i] === \"[\") unmatched++;\n          // If the next character is a closing bracket then there is one less unmatched bracket\n          if (program[i] === \"]\") unmatched--;\n          // Otherwise, keep jumping to the next character until the matching closing bracket is found\n        }\n      }\n      break;\n      case \"]\":\n      if (array[cellIndex] !== 0) {\n        // Unmatched ending bracket found.  Read backwards in the BF program to find its matching opening bracket\n        var unmatched = 1;\n        while (unmatched > 0) {\n          // Jump to the previous character in the BF program\n          i--;\n          // If the next character is an opening bracket then there is one less unmatched bracket\n          if (program[i] === \"[\") unmatched--;\n          // If the next character is an ending bracket then there is one more unmatched bracket\n          if (program[i] === \"]\") unmatched++;\n          // Otherwise, keep reading backwards in the BF program until the matching opening bracket is found\n        }\n      }\n      break;\n    }\n  }\n  // Return final output\n  return output;\n}\n\nif (!module.required) {\n    print(brainfuck(input));\n}\n\nmodule.exports = brainfuck;",
    "locked": true,
    "starred": false
}