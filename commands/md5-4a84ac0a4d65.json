{
    "name": "md5",
    "command": "print(md5(input));\n\nfunction md5(a) {\n  'use strict'\n\n  /*\n  * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n  * to work around bugs in some JS interpreters.\n  */\n  function safe_add (x, y) {\n    var lsw = (x & 0xFFFF) + (y & 0xFFFF)\n    var msw = (x >> 16) + (y >> 16) + (lsw >> 16)\n    return (msw << 16) | (lsw & 0xFFFF)\n  }\n\n  /*\n  * Bitwise rotate a 32-bit number to the left.\n  */\n  function bit_rol (num, cnt) {\n    return (num << cnt) | (num >>> (32 - cnt))\n  }\n\n  /*\n  * These functions implement the four basic operations the algorithm uses.\n  */\n  function md5_cmn (q, a, b, x, s, t) {\n    return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b)\n  }\n  function md5_ff (a, b, c, d, x, s, t) {\n    return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t)\n  }\n  function md5_gg (a, b, c, d, x, s, t) {\n    return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t)\n  }\n  function md5_hh (a, b, c, d, x, s, t) {\n    return md5_cmn(b ^ c ^ d, a, b, x, s, t)\n  }\n  function md5_ii (a, b, c, d, x, s, t) {\n    return md5_cmn(c ^ (b | (~d)), a, b, x, s, t)\n  }\n\n  /*\n  * Calculate the MD5 of an array of little-endian words, and a bit length.\n  */\n  function binl_md5 (x, len) {\n    /* append padding */\n    x[len >> 5] |= 0x80 << (len % 32)\n    x[(((len + 64) >>> 9) << 4) + 14] = len\n\n    var i\n    var olda\n    var oldb\n    var oldc\n    var oldd\n    var a = 1732584193\n    var b = -271733879\n    var c = -1732584194\n    var d = 271733878\n\n    for (i = 0; i < x.length; i += 16) {\n      olda = a\n      oldb = b\n      oldc = c\n      oldd = d\n\n      a = md5_ff(a, b, c, d, x[i], 7, -680876936)\n      d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586)\n      c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819)\n      b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330)\n      a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897)\n      d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426)\n      c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341)\n      b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983)\n      a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416)\n      d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417)\n      c = md5_ff(c, d, a, b, x[i + 10], 17, -42063)\n      b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162)\n      a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682)\n      d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101)\n      c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290)\n      b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329)\n\n      a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510)\n      d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632)\n      c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713)\n      b = md5_gg(b, c, d, a, x[i], 20, -373897302)\n      a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691)\n      d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083)\n      c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335)\n      b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848)\n      a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438)\n      d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690)\n      c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961)\n      b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501)\n      a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467)\n      d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784)\n      c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473)\n      b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734)\n\n      a = md5_hh(a, b, c, d, x[i + 5], 4, -378558)\n      d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463)\n      c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562)\n      b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556)\n      a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060)\n      d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353)\n      c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632)\n      b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640)\n      a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174)\n      d = md5_hh(d, a, b, c, x[i], 11, -358537222)\n      c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979)\n      b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189)\n      a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487)\n      d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835)\n      c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520)\n      b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651)\n\n      a = md5_ii(a, b, c, d, x[i], 6, -198630844)\n      d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415)\n      c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905)\n      b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055)\n      a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571)\n      d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606)\n      c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523)\n      b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799)\n      a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359)\n      d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744)\n      c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380)\n      b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649)\n      a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070)\n      d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379)\n      c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259)\n      b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551)\n\n      a = safe_add(a, olda)\n      b = safe_add(b, oldb)\n      c = safe_add(c, oldc)\n      d = safe_add(d, oldd)\n    }\n    return [a, b, c, d]\n  }\n\n  /*\n  * Convert an array of little-endian words to a string\n  */\n  function binl2rstr (input) {\n    var i\n    var output = ''\n    for (i = 0; i < input.length * 32; i += 8) {\n      output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF)\n    }\n    return output\n  }\n\n  /*\n  * Convert a raw string to an array of little-endian words\n  * Characters >255 have their high-byte silently ignored.\n  */\n  function rstr2binl (input) {\n    var i\n    var output = []\n    output[(input.length >> 2) - 1] = undefined\n    for (i = 0; i < output.length; i += 1) {\n      output[i] = 0\n    }\n    for (i = 0; i < input.length * 8; i += 8) {\n      output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32)\n    }\n    return output\n  }\n\n  /*\n  * Calculate the MD5 of a raw string\n  */\n  function rstr_md5 (s) {\n    return binl2rstr(binl_md5(rstr2binl(s), s.length * 8))\n  }\n\n  /*\n  * Calculate the HMAC-MD5, of a key and some data (raw strings)\n  */\n  function rstr_hmac_md5 (key, data) {\n    var i\n    var bkey = rstr2binl(key)\n    var ipad = []\n    var opad = []\n    var hash\n    ipad[15] = opad[15] = undefined\n    if (bkey.length > 16) {\n      bkey = binl_md5(bkey, key.length * 8)\n    }\n    for (i = 0; i < 16; i += 1) {\n      ipad[i] = bkey[i] ^ 0x36363636\n      opad[i] = bkey[i] ^ 0x5C5C5C5C\n    }\n    hash = binl_md5(ipad.concat(rstr2binl(data)), 512 + data.length * 8)\n    return binl2rstr(binl_md5(opad.concat(hash), 512 + 128))\n  }\n\n  /*\n  * Convert a raw string to a hex string\n  */\n  function rstr2hex (input) {\n    var hex_tab = '0123456789abcdef'\n    var output = ''\n    var x\n    var i\n    for (i = 0; i < input.length; i += 1) {\n      x = input.charCodeAt(i)\n      output += hex_tab.charAt((x >>> 4) & 0x0F) +\n      hex_tab.charAt(x & 0x0F)\n    }\n    return output\n  }\n\n  /*\n  * Encode a string as utf-8\n  */\n  function str2rstr_utf8 (input) {\n    return unescape(encodeURIComponent(input))\n  }\n\n  /*\n  * Take string arguments and return either raw or hex encoded strings\n  */\n  function raw_md5 (s) {\n    return rstr_md5(str2rstr_utf8(s))\n  }\n  function hex_md5 (s) {\n    return rstr2hex(raw_md5(s))\n  }\n  function raw_hmac_md5 (k, d) {\n    return rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d))\n  }\n  function hex_hmac_md5 (k, d) {\n    return rstr2hex(raw_hmac_md5(k, d))\n  }\n\n\n  return hex_md5(a)\n}",
    "locked": true,
    "starred": false
}