{
    "name": "statuscode",
    "command": "input = input.trim();\nconst mainType = [\n    { name: '1', value: 'Informational' },\n    { name: '2', value: 'Success' },\n    { name: '3', value: 'Redirection' },\n    { name: '4', value: 'Client Error' },\n    { name: '5', value: 'Server Error' },\n].find(d => d.name == input[0]) || ({ value: 'Unknown' });\nconst subType = [\n    { name: '100', value: 'Continue' },\n    { name: '101', value: 'Switching Protocols' },\n    { name: '102', value: 'Processing' },\n    { name: '200', value: 'OK' },\n    { name: '201', value: 'Created' },\n    { name: '202', value: 'Accepted' },\n    { name: '203', value: 'Non-authoritative Information' },\n    { name: '204', value: 'No Content' },\n    { name: '205', value: 'Reset Content' },\n    { name: '206', value: 'Partial Content' },\n    { name: '207', value: 'Multi-Status' },\n    { name: '208', value: 'Already Reported' },\n    { name: '226', value: 'IM Used' },\n    { name: '300', value: 'Multiple Choices' },\n    { name: '301', value: 'Moved Permanently' },\n    { name: '302', value: 'Found' },\n    { name: '303', value: 'See Other' },\n    { name: '304', value: 'Not Modified' },\n    { name: '305', value: 'Use Proxy' },\n    { name: '307', value: 'Temporary Redirect' },\n    { name: '308', value: 'Permanent Redirect' },\n    { name: '400', value: 'Bad Request' },\n    { name: '401', value: 'Unauthorized' },\n    { name: '402', value: 'Payment Required' },\n    { name: '403', value: 'Forbidden' },\n    { name: '404', value: 'Not Found' },\n    { name: '405', value: 'Method Not Allowed' },\n    { name: '406', value: 'Not Acceptable' },\n    { name: '407', value: 'Proxy Authentication Required' },\n    { name: '408', value: 'Request Timeout' },\n    { name: '409', value: 'Conflict' },\n    { name: '410', value: 'Gone' },\n    { name: '411', value: 'Length Required' },\n    { name: '412', value: 'Precondition Failed' },\n    { name: '413', value: 'Payload Too Large' },\n    { name: '414', value: 'Request-URI Too Long' },\n    { name: '415', value: 'Unsupported Media Type' },\n    { name: '416', value: 'Requested Range Not Satisfiable' },\n    { name: '417', value: 'Expectation Failed' },\n    { name: '418', value: 'I\\'m a teapot' },\n    { name: '420', value: 'Enhance Your Calm' },\n    { name: '421', value: 'Misdirected Request' },\n    { name: '422', value: 'Unprocessable Entity' },\n    { name: '423', value: 'Locked' },\n    { name: '424', value: 'Failed Dependency' },\n    { name: '426', value: 'Upgrade Required' },\n    { name: '428', value: 'Precondition Required' },\n    { name: '429', value: 'Too Many Requests' },\n    { name: '431', value: 'Request Header Fields Too Large' },\n    { name: '444', value: 'Connection Closed Without Response' },\n    { name: '451', value: 'Unavailable For Legal Reasons' },\n    { name: '499', value: 'Client Closed Request' },\n    { name: '500', value: 'Internal Server Error' },\n    { name: '501', value: 'Not Implemented' },\n    { name: '502', value: 'Bad Gateway' },\n    { name: '503', value: 'Service Unavailable' },\n    { name: '504', value: 'Gateway Timeout' },\n    { name: '505', value: 'HTTP Version Not Supported' },\n    { name: '506', value: 'Variant Also Negotiates' },\n    { name: '507', value: 'Insufficient Storage' },\n    { name: '508', value: 'Loop Detected' },\n    { name: '510', value: 'Not Extended' },\n    { name: '511', value: 'Network Authentication Required' },\n    { name: '599', value: 'Network Connect Timeout Error' },\n].find(d => d.name == input) || ({ name: '?', value: 'Unknown' });\n\nprint(`{bo}${subType.name}{/} ${subType.value} {dgr}(${mainType.value}){/}`);\n",
    "locked": true,
    "starred": false
}