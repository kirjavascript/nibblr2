{
    "name": "scrabble.game.stats",
    "command": "const {round} = IRC.require(\"scrabble.game\")\r\n\r\nconst showAll = input == 'all';\r\nconst scores = _.sortBy(store.all(), (d) => +d.value)\r\n.reduce((acc, cur) => {\r\n    const exists = acc.findIndex((d) => d.value === cur.value);\r\n    if (exists !== -1) {\r\n        acc[exists].key += `, ${IRC.breakHighlight(cur.key)}`;\r\n    } else {\r\n        cur.key = IRC.breakHighlight(cur.key)\r\n        acc.push(cur);\r\n    }\r\n    return acc;\r\n}, []).slice(0,Infinity).filter(d => !(d.key.includes('_guesses') || d.key.includes('$')));\r\n\r\nconst longest = scores.reduce((acc, cur) => Math.max(acc, cur.key.length), 0) + 2;\r\n    \r\nprint(`{u}Leaderboard{/}`);\r\nconst colours = ['{y}','{gr}','{o}'];\r\nscores.reverse().forEach(({key, value}, i)=> {\r\n    if (Number.isNaN(+value)) return;\r\n    const pad = longest - key.length - (String(i+1).length - 1);\r\n    print(`${i}. ${colours[i-1]||''}${key}{/}{bo}${'.'.repeat(pad>0?pad:0)}{/}{y}${round(+value)}`)\r\n})\r\nprint(`scrabble has been played {dc}${IRC.require('module.count').count()}{/} times`)",
    "locked": false,
    "starred": false
}