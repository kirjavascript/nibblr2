{
    "name": "scrabble.game.hint",
    "command": "const {isGameRunning } = IRC.require(\"scrabble.game\")\n\nString.prototype.replaceAll = function(search, replacement) {\n    var target = this;\n    return target.replace(new RegExp(search, 'g'), replacement);\n};\n\nfunction getHintBackup(word){\n    let hint_given = false;\n    print(\"No hint, must be alternative spelling\")\n    return hint_given;\n}\n\nfunction getHint(word){\n    let data = fetchSync(\"https://www.collinsdictionary.com/dictionary/english/\" + word,{type:'dom'})\n\n    definition = data.document.getElementsByClassName(\"sense\")\n    origin = data.document.getElementsByClassName(\"etym\")\n    \n    let hint_given = false;\n    \n    if (definition.length > 0){\n        print(censor(definition[0].textContent,word))\n        hint_given = true;\n    }\n    else{\n        hint_given = getHintBackup(word)\n    }\n    \n    if(hint_given){\n        store.set(\"hint\",\"true\")\n    }\n}\n\nfunction censor(text,word){\n    return text.replaceAll(word,\"█\".repeat(word.length)).replaceAll(word.substring(0,word.length-1),\"█\".repeat(word.length)).replaceAll(word.capitalize(),\"█\".repeat(word.length))\n}\n\nString.prototype.capitalize = function() {\n  return this.charAt(0).toUpperCase() + this.slice(1)\n}\n\n\nif(isGameRunning()){\n    getHint(store.get(\"game\").toLowerCase())\n}\nelse{\n    print(\"No game running\")\n}",
    "locked": false,
    "starred": false
}