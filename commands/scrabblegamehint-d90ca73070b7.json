{
    "name": "scrabble.game.hint",
    "command": "const {isGameRunning } = IRC.require(\"scrabble.game\")\n\nString.prototype.replaceAll = function(search, replacement) {\n    var target = this;\n    return target.replace(new RegExp(search, 'g'), replacement);\n};\n\nfunction getHintBackup(word){\n    \n    getDOM(`https://en.m.wiktionary.org/wiki/` + word)\n.then(dom => {       \n    dom.qsa('ol > li').splice(0, IRC.command.params[0] || 3).forEach(d => {\n        const extra = d.querySelector('ul');\n        extra && extra.remove();\n        print(censor(d.textContent))\n    })    \n})\n.catch(print.error);\n       \n}\n\nfunction getHint(word){\n    let data = fetchSync(\"https://www.collinsdictionary.com/dictionary/english/\" + word,{type:'dom'})\n\n    definition = data.document.getElementsByClassName(\"sense\")\n    origin = data.document.getElementsByClassName(\"etym\")\n    \n    if (definition.length > 0){\n        print(censor(definition[0].textContent,word))\n    }\n    else{\n        getHintBackup(word)\n    }\n}\n\nfunction censor(text,word){\n    return text.replaceAll(word,\"█\".repeat(word.length)).replaceAll(word.substring(0,word.length-1),\"█\".repeat(word.length))\n}\n\nif(isGameRunning()){\n    getHint(store.get(\"game\"))\n}\nelse{\n    print(\"No game running\")\n}",
    "locked": false,
    "starred": false
}