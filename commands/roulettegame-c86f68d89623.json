{
    "locked": false,
    "starred": false,
    "name": "roulette.game",
    "command": "const useGame = () => IRC.require('module.loadObject')('game', {\n    isRunning: false,\n    scores: {},\n    bets: {},\n    plays: {}, // number of times a user has played\n    history: [],\n    house: 0,\n});\n\nconst fmtNum = num => '{y}$' + Intl.NumberFormat().format(num) + '{/}';\n\nconst numbers = [0,32,15,19,4,21,2,25,17,34,6,27,13,36,11,30,8,23,10,5,24,16,33,1,20,14,31,9,22,18,29,7,28,12,35,3,26];\n\nconst isRed = (num) => (\n    ((num >= 1 && num <= 10 || num >= 19 && num <= 28) && num & 1)\n    || (num >= 11 && num <= 18 || num >= 29 && num <= 36) && !(num & 1)\n);\n\nconst isValidLocation = (str) => /even|odd|\\d+|red|black|low|high/.test(str);\n\nconst spin = () => numbers[0|Math.random()*37];\n\nconst renderNumber = (num, withBall = false) => {\n    const ball = withBall ? '● ' : ''; // ⬤\n    if (!num) return `{w,g} ${num} ${ball}{/}`;\n    if (isRed(num)) return `{w,r} ${num} ${ball}{/}`;\n    else return `{w,bl} ${num} ${ball}{/}`;\n};\n\nconst renderLocation = (location) => {\n    if (!Number.isNaN(parseInt(location, 10))) {\n        return renderNumber(+location);\n    } else if (location == 'red') {\n        return '{w,r} red {/}';\n    } else if (location == 'black') {\n        return '{w,bl} black {/}';\n    } else {\n        const colour = /low|odd/.test(location) ? 'b' : 'p';\n        return `{w,${colour}} ${location} {/}`;\n    }\n};\n\n\nmodule.exports = { \n    useGame,\n    isRed,\n    renderNumber,\n    renderLocation,\n    spin,\n    isValidLocation,\n    numbers,\n    fmtNum,\n};"
}