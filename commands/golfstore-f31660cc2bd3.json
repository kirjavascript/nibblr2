{
    "locked": false,
    "starred": false,
    "name": "golf.store",
    "command": "// changelog\n//\n// refactored everything\n// arranged items by timestamps\n// made tasks case sensitive\n//\n//\n// migration\n// golf.task.numbers\n// one page of info\n// vote\n// check JSGOLF\n// world record!\n// golf.tests\n\n// migration\n\n\nconst tasks = IRC.require('golf.tasks');\n\n// store.load\nconst save = (key, data) => store.set(key, JSON.stringify(data));\nconst load = (key) => {\n    const data = store.get(key);\n    return typeof data === 'undefined' ? {} : JSON.parse(data);\n};\n\n// migrate\nObject.keys(tasks).forEach(d => {\n    const [key, item] = [d, IRC.require('module.loadObject')(`scores-${d}`)[0]];\n    save('task-' + key.toLowerCase(), item);\n});\n\n// scores: [{ bytes, solution, timestamp }]\n\n// average rank | global | chars used \n\nfunction loadScores(task) {\n    return load(`task-${task}`);\n}\n\nfunction getLeaderboard(name) {\n    const list = Object.entries(loadScores(name))\n        .map(([key, value]) => ({ from: key, ...value }));\n    list.sort((a, b) => a.bytes - b.bytes);\n    const grouped = [/*{ bytes, scores }*/];\n    list.forEach(score => {\n        const exists = grouped.find(d => d.bytes === score.bytes)\n        if (exists) {\n            exists.scores.push(score)\n        } else {\n            grouped.push({ bytes: score.bytes, scores: [score] });\n        }\n    });\n    // arrange by timestamps\n    grouped.forEach(group => {\n        group.scores.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp))\n    })\n    return grouped;\n}\n\nmodule.exports = {\n    getLeaderboard,\n    taskList: Object.keys(tasks),\n};"
}