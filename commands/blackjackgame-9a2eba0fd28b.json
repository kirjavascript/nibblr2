{
    "locked": false,
    "starred": false,
    "name": "blackjack.game",
    "command": "const { Profile } = IRC.require('blackjack.profile')\n\nconst bj = require('engine-blackjack')\nconst rules = bj.presets.getRules({})\nrules.insurance = false\nrules.surrender = false\n\nconst newGame = () => new bj.Game(null, rules)\nconst clearGame = user => store.clear( user)\nconst stand = game => game.dispatch( bj.actions.stand({position:getActivePosition( game)}))\nconst hit = game => game.dispatch( bj.actions.hit({position:getActivePosition( game)}))\nconst double = game => game.dispatch( bj.actions.double({position:getActivePosition( game)}))\nconst split = game => game.dispatch( bj.actions.split({position:getActivePosition( game)}))\nconst deal = (game, bet) => game.dispatch( bj.actions.deal({bet}))\n\nconst SUITS  = { spades: '♠', clubs: '♣', hearts: '♥', diamonds: '♦'}\nconst VALUES = { 'A': 'A', 2: '2', 3: '3', 4: '4', 5: '5',\n                   6: '6', 7: '7', 8: '8', 9: '9', '10': '⒑',\n                 'J': 'J', 'Q': 'Q', 'K': 'K' }\nconst COLOURS = { 'R': 'r', 'B': 'bl'}\n\nconst joinChunks = (separator, ...chunks) => {\n    let output = new Array(chunks[0].length).fill(0)\n    \n    return output\n        .map( (c,i,a) => chunks.map( chunk => chunk[i]).join(separator))\n}\n\nconst getProfile = user => {\n    return new Profile( user)\n}\n\nconst getBalance = user => {\n    let balance = store.get(`balance ${user}`)\n    \n    if( typeof balance === 'undefined' ) {\n        print(`New player, new money. Welcome, {o}${user}{/}, have {g}¤1000{/} on the house!`)\n        balance = 1000\n        setBalance( user, balance)\n    }\n    \n    return balance|0\n}\n    \nconst setBalance = (user, balance) => store.set(`balance ${user}`, balance)\n\nconst adjustBalance = (user, value) => {\n    let balance = getBalance( user)\n    setBalance( user, balance+value|0)\n    return balance+value\n}\n\nconst gameOver = game => game.getState().stage === 'done'\n\nconst finishGame = profile => {\n    \n    profile.balance += Number( profile.state.wonOnLeft)|0\n    profile.balance += Number( profile.state.wonOnRight)|0\n}\n\nconst textCard = card => {\n    let colour = COLOURS[card.color]\n    let suit   = SUITS[card.suite]\n    let symbol = VALUES[card.text]\n\n    return [`{${colour},w}${symbol} ${suit}{/}`,\n            //`{w,w} ${symbol} {/}`,\n            `{w,w}   {/}`,\n            `{${colour},w}${suit} ${symbol}{/}`]\n}\n\nconst leftPad = (str, filler, size) => {\n    while( str.replace(/{.*?}/g,'').length<size) str = filler + str\n    \n    return str\n}\n\nconst printTable = profile => {\n    if( profile.data.preferences.compact) {\n        printTableCompact( profile)\n    } else {\n        printTableNormal( profile)\n    }\n}\n\nconst printTableCompact = profile => {\n    const leftHand = profile.state.handInfo.left\n    const rightHand = profile.state.handInfo.right\n    \n    const dealerCards = profile.state.dealerCards\n    \n    let scoreText=''\n    if( profile.position) {\n        scoreText = valueToText( profile.activeHand.playerValue)\n    }\n    \n    //let scoreText = valueToText( profile.activeHand.playerValue)\n    let betAmount = profile.state.finalBet == '0' ? profile.state.initialBet : profile.state.finalBet\n    let betText = '¤'+betAmount\n    let dealerScoreText = valueToText( profile.state.dealerValue)\n\n    let leftHandText = ''\n    if( leftHand.hasOwnProperty('cards')) {\n        leftHandText = leftHand.cards.map( card => textCard( card)[0]).join(' ')\n        \n        if( profile.position === 'left') {\n            leftHandText += '{y,dgr} <- '\n        } else if( profile.position === 'right') {\n            leftHandText += '{y,dgr} -> '\n        } else {\n            leftHandText += '    '\n        }\n    }\n    \n    let rightHandText = ''\n    if( rightHand.hasOwnProperty('cards')) {\n        rightHandText = rightHand.cards.map( card => textCard( card)[0]).join(' ')\n    }\n    \n    let dealerCardsText = dealerCards.map( card => textCard( card)[0]).join(' ')\n    let actionList = availableActions( profile.game)\n\n    let gameInfoText\n    if( profile.isInGame) {\n        gameInfoText =`{w}Available Actions{/} {y}${actionList} {/}`\n    } else {\n        const winAmount = (profile.state.wonOnRight|0) + (profile.state.wonOnLeft|0)\n        const finalBet = profile.state.finalBet|0\n        \n        let profit = winAmount-finalBet\n        let winText\n        let message\n\n        if( profit < 0) {\n            gameInfoText = `You lost {g}¤${profit*-1}{/} Better luck next time!`\n        } else if( profit === 0) {\n            gameInfoText = 'Wow! You won.... nothing. Do try again'\n        } else {\n            gameInfoText = `Congratulations! You won {g}¤${profit}{/}`\n        }\n    }\n    \n    print( `{o}${profile.name}{/}: {y}${scoreText}{/} {g}${betText}{/}, ${leftHandText}${rightHandText}`\n          +` -- {o}Dealer{/}: {y}${dealerScoreText}{/} ${dealerCardsText} :: ${gameInfoText}`)\n}\n\nconst printTableNormal = profile => {\n    \n    const leftHand = profile.state.handInfo.left\n    const rightHand = profile.state.handInfo.right\n    \n    const dealerCards = profile.state.dealerCards\n        \n    let scoreText='         '\n    if( profile.position) {\n        scoreText = leftPad( valueToText( profile.activeHand.playerValue), ' ', 9)\n    }\n    let betAmount = profile.state.finalBet == '0' ? profile.state.initialBet : profile.state.finalBet\n    let betText = leftPad( '¤'+betAmount, ' ', 9)\n    let userText = profile.name\n    if( userText.length > 9) { userText = userText.substr(0,9) }\n    userText = leftPad( userText, ' ', 9)\n    \n    let playerStatusChunk = [\n            `{w,dgr}${userText}{/}`,\n            `{y,dgr}${scoreText}{/}`,\n            `{g,dgr}${betText}{/}`\n        ]\n        \n    let dealerScoreText = leftPad( valueToText( profile.state.dealerValue), ' ', 9)\n        \n    let dealerStatusChunk = [\n            `{w,dgr}   Dealer{/}`,\n            `{y,dgr}${dealerScoreText}{/}`,\n            `{w,dgr}         {/}`\n        ]\n        \n    let leftHandChunks = []\n    if( leftHand.hasOwnProperty('cards')) {\n        leftHandChunks = leftHand.cards.map( card => textCard( card))\n        \n        let position = getActivePosition( profile.game)\n        if( position === 'left') {\n            leftHandChunks.push( [`{y,dgr}    `, `{y,dgr} <- `, `{y,dgr}    `])\n        } else if( position === 'right') {\n            leftHandChunks.push( [`{y,dgr}    `, `{y,dgr} -> `, `{y,dgr}    `])\n        } else {\n            leftHandChunks.push( [`{y,dgr}    `, `{y,dgr}    `, `{y,dgr}    `])\n        }\n    }\n    \n    let rightHandChunks = []\n    if( rightHand.hasOwnProperty('cards')) {\n        rightHandChunks = rightHand.cards.map( card => textCard( card))\n    }\n    \n    let dealerCardsChunks = dealerCards.map( card => textCard( card))\n    \n    let actionList = leftPad( availableActions( profile.game), ' ', 30)\n    let gameInfoChunk\n    \n    if( !gameOver( profile.game)) {\n        gameInfoChunk = [\n            `{w,dgr} Available Actions             {/}`,\n            `{y,dgr}${actionList} {/}`,\n            `{y,dgr}                               {/}`,\n        ]\n    } else {\n        \n        const winAmount = (profile.state.wonOnRight|0) + (profile.state.wonOnLeft|0)\n        const finalBet = profile.state.finalBet|0\n        \n        let profit = winAmount-finalBet\n        let winText\n        let message\n\n        if( profit < 0) {\n            winText = `You lost {g}¤${profit*-1}{/}{w,dgr}       {/}`\n            message = `Better luck next time!  `\n        } else if( profit === 0) {\n            winText = 'Wow! You won.... nothing '\n            message = 'Do try again          '\n        } else {\n            winText = `Congratulations!       {/}`\n            message = ` You won {g}¤${profit}{/}{w,dgr}        {/}`\n        }\n        \n        winText = leftPad( winText, ' ', 30)\n        message = leftPad( message, ' ', 30)\n        \n        gameInfoChunk = [\n            `{w,dgr}${winText}{/}`,\n            `{w,dgr}${message}{/}`,\n            `{w,dgr}${' '.repeat(30)}{/}`\n        ]\n    }\n    \n    print(\n        joinChunks( '{bl,dgr} {/}', \n            playerStatusChunk,\n            ...leftHandChunks,\n            ...rightHandChunks,\n            dealerStatusChunk,\n            ...dealerCardsChunks,\n            [`{bl,dgr}   {/}`,`{bl,dgr}   {/}`,`{bl,dgr}   {/}`],\n            gameInfoChunk\n        ).join(\"\\n\"))\n}\n\nconst restoreGame = user => {\n    const savedState = store.get( user)\n    \n    if( savedState) {\n        const state = JSON.parse( savedState)\n\n        const game = newGame()\n        game.setState( state)\n        return game\n        \n    } else {\n        return null\n    }\n}\n\nconst saveGame = (user, game) => {\n    store.set( user, JSON.stringify( game.getState()))\n}\n\nconst getActiveHand = game => {\n    const position = getActivePosition( game)\n    const hand = game.getState().handInfo[ position]\n    \n    return hand\n}\n\nconst showActions = game => {\n    print( `Your available actions are: ${availableActions( game)}.`)\n}\n\nconst getActivePosition = game => {\n    let position = null\n\n    if( game.getState().stage === 'player-turn-right') {\n        position = 'right'\n    } else if( game.getState().stage === 'player-turn-left') {\n        position = 'left'\n    }\n    \n    return position\n}\n\nconst availableActions = game => {\n    \n    const position = getActivePosition( game)\n    \n    if( position !== null) {\n        \n        const hand = game.getState().handInfo[ position]\n        const actionList = Object.keys( hand.availableActions)\n            .filter( a => hand.availableActions[a])\n            .map( a => `${a}`)\n            .join(' ')\n        \n        return actionList\n    } else {\n        return 'none'\n    }\n}\n\nconst cardsToText = cards => {\n    \n    let output = ''\n    \n    cards.forEach( card => {\n        output += `{${COLOURS[card.color]},w} ${SUITS[card.suite]}    ${VALUES[card.text]} {/} `\n    })\n    \n    return output\n}\n\nconst valueToText = handValue => {\n    \n    if( handValue.lo > 21) {\n        return '  {w,r} BUST! {/}'\n    }\n    \n    let output = `${handValue.lo}`\n    output += (handValue.lo !== handValue.hi) ? `/${handValue.hi}` : ''\n    return output\n}\n\nconst handToText = hand => {\n    return `${cardsToText(hand.cards)}-- `\n         + `value: ${valueToText(hand.playerValue)}`\n         + (hand.playerHasBusted ? ' {r}Bust!{/}' : '')\n}\n\nconst dealerHandToText = game => {\n    return  `${cardsToText(game.getState().dealerCards)}`\n          + `-- value: ${valueToText(game.getState().dealerValue)}`\n          + (game.getState().dealerHasBusted ? ' {r}Bust!{/}' : '')\n}\n\nmodule.exports = {\n    adjustBalance,\n    availableActions,\n    clearGame,\n    deal,\n    dealerHandToText,\n    double,\n    finishGame,\n    gameOver,\n    getProfile,\n    getActiveHand,\n    getActivePosition,\n    getBalance,\n    handToText,\n    hit,\n    newGame,\n    printTable,\n    restoreGame,\n    saveGame,\n    setBalance,\n    showActions,\n    split,\n    stand,\n}"
}