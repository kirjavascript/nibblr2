{
    "locked": false,
    "starred": false,
    "name": "roulette.scores",
    "command": "input = input.trim();\nconst showAll = input.includes('all');\nconst showStack = input.includes('stack');\nconst showRebuys = input.includes('rebuys');\nconst showPlays = input.includes('plays');\nconst [game] = IRC.require('roulette.game').useGame();\n\nif (game.scores[input]) {\n    const score = game.scores[input];\n    const rebuys = game.rebuys[input] || 0;\n    const plays = game.plays[input] || 1;\n    const adjusted = score - (rebuys * 1000);\n    print(IRC.colors.nick(input, false) + ` has {y}$${Intl.NumberFormat().format(+adjusted)}{/} ({y}$${Intl.NumberFormat().format(+score)}{/} stack with {dc}${rebuys}{/} rebuys) `)\n}\nelse {\n    const scores = Object.entries(game.scores).map(([name, score]) => {\n        const rebuys = game.rebuys[name] || 0;\n        const plays = game.plays[name] || 1;\n        const adjusted = score - (rebuys * 1000);\n        const rebuyStr = rebuys ? `({y}${rebuys}{/} rebuys - {y}$${Intl.NumberFormat().format(+adjusted)}{/})` : '({g}no{/} rebuys)';\n        let extra = showStack ? rebuyStr : '';\n        if (showPlays) {\n            extra += ` ({dc}${plays}{/} play${plays > 1 ? 's' : ''})`;\n        }\n        const amount = showStack ? score : adjusted;\n        \n        return {\n            name,\n            score: showRebuys ? rebuys : amount,\n            extra,\n        };\n    });\n    print(IRC.require('module.leaderboard')({ \n        scores,\n        currency: showRebuys ? '' : '$',\n        limit: showAll ? 0 : 5,\n        reverse: input.includes('worst'),\n    }));\n    \n}\n"
}