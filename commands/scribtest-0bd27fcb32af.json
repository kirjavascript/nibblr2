{
    "name": "scribtest",
    "command": "const useGame = () => IRC.require('module.loadObject')('game', {\r\n    captcha: false,\r\n    scores: {},\r\n});\r\n\r\nconst fruit = [\r\n    '{y,o} Cinnamon ',\r\n    '{w,dr} Crystal ',\r\n    '{w,dp} Venus ',\r\n    '{w,dg} Bethany ',\r\n    '{w,dr} Brandy ',\r\n    '{dgr,gr} Mercedes ',\r\n    '{p,dc} Tequila ',\r\n    '{w,o} Sapphire ',\r\n    '{r,dg} Jasmine ',\r\n    '{y,bl} Roxanne ',\r\n    '{dg,bl} Tatiana ',\r\n    '{w,o} Amber ',\r\n    '{y,dr} Lola ',\r\n    '{y,bl} Angel ',\r\n    '{w,dp} Ginger ',\r\n    '{g,dr} Candy ',\r\n    '{w,gr} Charity ',\r\n    '{w,dc} Anastasia ',\r\n    '{y,dg} Kitty ',\r\n    '{y,db} Raven ',\r\n    '{rb} Spontaneous Bootay '\r\n].map(d => d + '{/}');\r\nconst bagSize = 15;\r\nconst wheelQty = 3;\r\nconst defaultJackpot = 777;\r\nconst cost = 7;\r\nconst c = '$';\r\n\r\nconst bag = _.shuffle(fruit).splice(0, bagSize);\r\nconst roll = () => {\r\n    return bag[(Math.random())*bagSize|0];\r\n};\r\n\r\nconst wheels = Array.from({length: wheelQty}).map(roll);\r\n\r\ninput = input.trim().toLowerCase();\r\n\r\nif (!module.required) {\r\n    const [game, setGame] = useGame();\r\n    function solved(user) {\r\n        if (user in game.scores) {\r\n            game.scores[user] += 1;\r\n        } else {\r\n            game.scores[user] = 1;\r\n        }\r\n        return game.scores[user];\r\n    }\r\n    if (!game.captcha) {\r\n        const { q, a } = fetchSync.json('http://api.textcaptcha.com/nibblrjr.json');\r\n        game.captcha = { q, a };\r\n    }\r\n\r\n    if (!input) {\r\n        print('★  ' + game.captcha.q);\r\n    } else {\r\n        if (game.captcha.a.includes(require('md5')(input))) {\r\n            let jackpot = store.get('$jackpot');\r\n            delete game.captcha;\r\nif (!jackpot) {\r\n    jackpot = defaultJackpot;\r\n    store.set('$jackpot', defaultJackpot)\r\n}\r\nconst jackpotStr = Intl.NumberFormat().format(+jackpot);\r\nconst pad = wheels.map(d => d.replace(/{(.*?)}/g,'').length).reduce((a, b) => a + b, 0) - 15 - jackpotStr.length;\r\nprint(`{o}[{y} SLOOTS{/} ${pad>0?' '.repeat(pad):''}{g}Jackpot{/} {y}${c}${jackpotStr}{/}{o}]{dgr} *ball gargling sounds*{/}`);\r\nprint('{o}(' + wheels.join('{y}-{/}') + '{o}){y}/{r}°');\r\n\r\nconst funds = store.get(IRC.message.from) || 777;\r\n\r\nif (_.uniq(wheels).length == 1) {\r\n    const newScore = +funds + +jackpot\r\n    store.set(IRC.message.from, newScore)\r\n    print(`{bl,gr}{rb} 8====D S L U T P O T 8====D {/} ${IRC.message.from} has {y}${c}${Intl.NumberFormat().format(newScore)}`);\r\n    store.set('$jackpot', defaultJackpot);\r\n}\r\nelse if (wheels[0]==wheels[1] || wheels[1] == wheels[2]) {\r\n    const win = ((Math.random()*35)|0)+1;\r\n    const newScore = +funds + win;\r\n    store.set(IRC.message.from, newScore);\r\n    print(`${IRC.message.from} won {y}${c}${win}{/}! and has {y}${c}${Intl.NumberFormat().format(newScore)}{/}`);\r\n}\r\nelse {\r\n    const newScore = +funds - cost\r\n    store.set(IRC.message.from, newScore);\r\n    print(`${IRC.message.from} has {y}${c}${Intl.NumberFormat().format(newScore)}{/}`)\r\n    store.set('$jackpot', +jackpot + (cost * 2));\r\n}\r\n        } else {\r\n            print.error(`incorrect - ${game.captcha.q}`)\r\n        }\r\n    }\r\n\r\n\r\n    setGame(game);\r\n}\r\n\r\nmodule.exports = useGame;",
    "locked": false,
    "starred": false
}